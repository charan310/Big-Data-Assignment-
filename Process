# I have created data locally "EVENT.csv"

# Start kafka service
kafka-console-producer.sh -bootstrap-server localhost:9092 --topic kevent

1.Connect local data to Kafka using PySpark job
from pyspark.sql import SparkSession
from pyspark.sql.functions import to_json
from pyspark.sql.types import StructType, StringType

# Initialize SparkSession
spark = SparkSession.builder \
    .appName("LocalDataToKafka") \
    .getOrCreate()

# Read data from local CSV
data = spark.read.csv("mnt/d/EVENT.csv", header=True)

# Define schema for Kafka
kafka_schema = StructType() \
    .add("Event_Name", StringType()) \
    .add("Event_Type", StringType()) \
    .add("Event_Value", StringType()) \
    .add("Event_Timestamp", StringType()) \
    .add("Event_Page_Source", StringType()) \
    .add("Event_Page_URL", StringType()) \
    .add("Event_Component_ID", StringType()) \
    .add("User_ID", StringType()) \
    .add("Event_Date", StringType())

# Convert data to JSON and write to Kafka
data.select(to_json(data.schema.names).alias("value")) \
    .write \
    .format("kafka") \
    .option("kafka.bootstrap.servers", "localhost:9092") \
    .option("topic", "kevent") \
    .save()

2.Connect Kafka data to Iceberg table using Python
from pyspark.sql import SparkSession

# Initialize SparkSession
spark = SparkSession.builder \
    .appName("KafkaToIceberg") \
    .getOrCreate()

# Read data from Kafka
data = spark \
    .readStream \
    .format("kafka") \
    .option("kafka.bootstrap.servers", "localhost:9092") \
    .option("subscribe", "kevent") \
    .load()

# Write data to Iceberg table
data.write \
    .format("iceberg") \
    .mode("append") \
    .save("mnt/d/output/iceberg_table")

# Hive queries
#Create external table pointing to Iceberg data
CREATE EXTERNAL TABLE iceberg (
    Event_Name STRING,
    Event_Type STRING,
    Event_Value STRING,
    Event_Timestamp STRING,
    Event_Page_Source STRING,
    Event_Page_URL STRING,
    Event_Component_ID STRING,
    User_ID STRING,
    Event_Date STRING
)
LOCATION 'mnt/d/output/iceberg';

#Top 10 events and its count for a given date:
top_events_per_date = spark.sql(f"SELECT EventDate, EventName, COUNT(*) AS EventCount FROM {iceberg} GROUP BY EventDate, EventName ORDER BY EventDate, EventCount DESC")
top_events_per_date.show(10)

#Returning users:
returning_users = spark.sql(f"SELECT UserID, COUNT(DISTINCT EventDate) AS NumOfDays FROM {iceberg} GROUP BY UserID HAVING NumOfDays > 1")
returning_users.show()

#Active users:
active_users = spark.sql(f"SELECT UserID, COUNT(*) AS EventCount FROM {iceberg} GROUP BY UserID ORDER BY EventCount DESC")
active_users.show()

#Churn:
churn_users = spark.sql(f"SELECT UserID, MAX(EventDate) AS LastEventDate FROM {iceberg} GROUP BY UserID HAVING LastEventDate < '2024-01-16'")
churn_users.show()


*****CONFIGURATIONS*****

=>For hadoop
Prerequisite Test
=============================
sudo apt update
sudo apt install openjdk-8-jdk -y

java -version; javac -version
sudo apt install openssh-server openssh-client -y
ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa
cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
chmod 0600 ~/.ssh/authorized_keys
ssh localhost

Downloading Hadoop
===============================
wget https://downloads.apache.org/hadoop/common/hadoop-3.2.3/hadoop-3.2.3.tar.gz
tar xzf hadoop-3.2.3.tar.gz


Editng 6 important files
=================================
1st file
===========================
sudo nano .bashrc 

#Hadoop Related Options
export HADOOP_HOME=/home/intern/hadoop-3.2.3
export HADOOP_INSTALL=$HADOOP_HOME
export HADOOP_MAPRED_HOME=$HADOOP_HOME
export HADOOP_COMMON_HOME=$HADOOP_HOME
export HADOOP_HDFS_HOME=$HADOOP_HOME
export YARN_HOME=$HADOOP_HOME
export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin
export HADOOP_OPTS"-Djava.library.path=$HADOOP_HOME/lib/nativ"


source ~/.bashrc

2nd File
============================
sudo nano $HADOOP_HOME/etc/hadoop/hadoop-env.sh

export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64

3rd File
===============================
sudo nano $HADOOP_HOME/etc/hadoop/core-site.xml

   <property>
        <name>hadoop.tmp.dir</name>
        <value>/home/hdoop/tmpdata</value>
        <description>A base for other temporary directories.</description>
    </property>
    <property>
        <name>fs.default.name</name>
        <value>hdfs://localhost:9000</value>
        <description>The name of the default file system></description>
    </property>

4th File
====================================
sudo nano $HADOOP_HOME/etc/hadoop/hdfs-site.xml

<property>
  <name>dfs.data.dir</name>
  <value>/home/intern/dfsdata/namenode</value>
</property>
<property>
  <name>dfs.data.dir</name>
  <value>/home/intern/dfsdata/datanode</value>
</property>
<property>
  <name>dfs.replication</name>
  <value>1</value>
</property>


5th File
================================================

sudo nano $HADOOP_HOME/etc/hadoop/mapred-site.xml

<property>
  <name>mapreduce.framework.name</name>
  <value>yarn</value>
</property>

6th File
==================================================
sudo nano $HADOOP_HOME/etc/hadoop/yarn-site.xml

<property>
  <name>yarn.nodemanager.aux-services</name>
  <value>mapreduce_shuffle</value>
</property>
<property>
  <name>yarn.nodemanager.aux-services.mapreduce.shuffle.class</name>
  <value>org.apache.hadoop.mapred.ShuffleHandler</value>
</property>
<property>
  <name>yarn.resourcemanager.hostname</name>
  <value>127.0.0.1</value>
</property>
<property>
  <name>yarn.acl.enable</name>
  <value>0</value>
</property>
<property>
  <name>yarn.nodemanager.env-whitelist</name>
  <value>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PERPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME</value>
</property>

Launching Hadoop
==================================
hdfs namenode -format

=> For Hive
download and unzip Hive
=============================
wget

https://downloads.apache.org/hive/hive-
3.1.2/apache-hive-3.1.2-bin.tar.gz

tar xzf apache-hive-3.1.2-bin.tar.gz

Edit .bashrc file
========================
sudo nano .bashrc

export HIVE_HOME= /home/intern/apache-
hive-3.1.2-bin

export PATH=$PATH:$HIVE_HOME/bin
source ~/.bashrc
Edit hive-config.sh file

====================================
sudo nano $HIVE_HOME/bin/hive-config.sh

export HADOOP_HOME=/home/intern/hadoop-
3.2.1

Create Hive directories in HDFS
===================================
hdfs dfs -mkdir /tmp
hdfs dfs -chmod g+w /tmp
hdfs dfs -mkdir -p /user/hive/warehouse
hdfs dfs -chmod g+w /user/hive/warehouse

Fixing guava 
=================
rm $HIVE_HOME/lib/guava-19.0.jar
cp

$HADOOP_HOME/share/hadoop/hdfs/lib/guava-
27.0-jre.jar $HIVE_HOME/lib/

Initialize Derby and hive
============================
schematool -initSchema -dbType derby

launch hive
================
hive


#Docker Compose for kafka
===========================
# Copyright VMware, Inc.
# SPDX-License-Identifier: APACHE-2.0

version: "2"

services:
  kafka:
    image: docker.io/bitnami/kafka:3.6
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
volumes:
  kafka_data:
    driver: local


#Docker compose for Iceberg
=============================

version: "3"

services:
  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    build: spark/
    networks:
      iceberg_net:
    depends_on:
      - rest
      - minio
    volumes:
      - ./warehouse:/home/iceberg/warehouse
      - ./notebooks:/home/iceberg/notebooks/notebooks
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001
  rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    networks:
      iceberg_net:
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      iceberg_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      tail -f /dev/null
      "
networks:
  iceberg_net:
